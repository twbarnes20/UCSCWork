% Kevin Cai (kcai2@ucsc.edu)
% Trevor Barnes (trwbarne@ucsc.edu)


/*
 * Not
 */
not(X) :- X, !, fail.
not(_).

/*
 * Returns time in hours
 */
totalHours(time(Hours, Mins), Hourstot) :-
    Hourstot is Hours + Mins / 60.

/*
 * Converts to measurements we need
 * for formulas
 */
convert_radians(degmin(Degrees, Minutes), Rads) :-
    Degs is Degrees + Minutes / 60,
    Rads is Degs * pi / 180.
 
/*
 * Converts the flight miles into time.
 * Plane flies at the constant speed of 500mph
 */
hours_from_miles(Miles, Hours) :-
    Hours is Miles / 500.

/* Haversine formula used to compute
 * great circle distance between points
 * on a sphere, in this case Earth
 */
haversine(LatA, LonA, LatB, LonB, Distance) :-
   Dlon is LonB - LonA,
   Dlat is LatB - LatA,
   A is sin(Dlat / 2) ** 2 + cos(LatA) * cos(LatB) * sin(Dlon / 2) ** 2,
   Dist is 2 * atan2(sqrt(A), sqrt(1 - A)),
   Distance is Dist * 3961. 

/*
 * Gives distance between airports
 */
airportDist(Airport1, Airport2, Distance) :-
   airport(Airport1, _, LatA, LonA),
   airport(Airport2, _, LatB, LonB),
   convert_radians(LatA, Lat1_float),
   convert_radians(LatB, Lat2_float),
   convert_radians(LonA, Lon1_float),
   convert_radians(LonB, Lon2_float),
   haversine(Lat1_float, Lon1_float, Lat2_float, Lon2_float, Distance).

/*
 * Finds a path between two airports.
 * Flights must take place in a single day
 * Each transfer or layover takes exactly 30
 * minutes. 
 */
flightPlan(Terminal, Terminal, _, [Terminal], _).
flightPlan(Prev, Terminal, Visited, [[Prev, FlightDep, FlightArr]
                                        | List], FlightDepInHM) :-
    flight(Prev, Terminal, FlightDepInHM),
    not(member( Terminal, Visited)),
    totalHours(FlightDepInHM, FlightDep),
    airportDist(Prev, Terminal, FDistance),
    hours_from_miles(FDistance, TimeDiff),
    FlightArr is FlightDep + TimeDiff,
    FlightArr < 24.00,
    flightPlan(Terminal, Terminal, [Terminal | Visited], List, _).

flightPlan(Prev, Terminal, Visited, [[Prev, FlightDep, FlightArr]
                                        | List], FlightDepInHM) :-
    flight(Prev, Next, FlightDepInHM),
    not(member(Next, Visited)),
    totalHours(FlightDepInHM, FlightDep),
    airportDist(Prev, Next, FDistance),
    hours_from_miles(FDistance, TimeDiff),
    FlightArr is FlightDep + TimeDiff,
    FlightArr < 24.00,
    flight(Next, _, NextFlightDepInHM),
    totalHours(NextFlightDepInHM, NextFlightDep),
    AdjTime is NextFlightDep - FlightArr - 0.5,
    AdjTime >= 0,
    flightPlan(Next, Terminal, [Next | Visited], 
                                        List, NextFlightDepInHM).

/*
 * Prints out the flight path found
 * previously
 */
flightPath([]) :-
    nl.

flightPath([[X, XDTime, XATime], Y | []]) :-
    airport(X, DepartEx, _, _), airport( Y, ArriveEx, _, _),
    write('   '), write('Depart from:  '),
    write(X), write('   '),
    write(DepartEx), printTime(XDTime), nl,
    write('   '), write('Arrive at:    '),
    write(Y), write('   '),
    write(ArriveEx), printTime(XATime), nl,
    !, true.

flightPath([[X, XDTime, XATime], [Y, YDTime, YATime] | Z]) :-
    airport(X, DepartEx, _, _), airport(Y, ArriveEx, _, _),
    write('   '), write('Depart from:  '),
    write(X), write('   '),
    write(DepartEx), printTime(XDTime), nl,
    write('   '), write('Arrive at:    '),
    write(Y), write('   '),
    write(ArriveEx), printTime(XATime), nl,
    !, flightPath([[Y, YDTime, YATime] | Z]).

/*
 * Prints various pieces of data
 */
printDigit(Timedigits) :-
    Timedigits < 10, print(0), print(Timedigits).
printDigit(Timedigits) :-
    Timedigits >= 10, print(Timedigits).
printTime(Hourstot) :-
    Minsdigits is floor(Hourstot * 60),
    Hours is Minsdigits // 60,
    Mins is Minsdigits mod 60,
    printDigit(Hours), print(':'), printDigit(Mins).

/*
 * Print statements for flights,
 * along with errors for flights that are invalid.
 */
% print the flights with depart & arrival time
fly(Depart, Arrive) :-
    airport(Depart, _, _, _ ),
    airport(Arrive, _, _, _ ),
    flightPlan(Depart, Arrive, [Depart], List, _),
    !, nl,
    flightPath( List ),
    true.

% Same airport error
fly(Depart, Depart) :-
    write('Error: Departure and arrival are at the same airport! '),
    nl,
    !, fail.

% no flights error
fly(Depart, Arrive) :-
    airport(Depart, _, _, _ ),
    airport(Arrive, _, _, _ ),
    write('Error: We could not find you a flight. Try a bus?'),
    !, fail.

% no airport error
fly(_, _) :-
    write('Error: This airport does not exist.'), nl,
!, fail.
